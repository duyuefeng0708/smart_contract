
import "github.com/ethereum/dapp-bin/library/linkedList.sol";


contract Caitest {
    using DoublyLinkedList for DoublyLinkedList.data;
    DoublyLinkedList.data public list;
    function Caitest() {
        list.append("ooo");
        list.append("abc");
        list.append("def");
        list.append("def");
    }
    function add(bytes32 data )  returns (bool success) {
        var it = list.find(data);
        if (!list.iterate_valid(it))
        {
            list.append(data);
            return true;
        }
        return false;
    }
    function prev(bytes32 data )  returns (string) {
        var it = list.find(data);
        if (list.iterate_valid(it))
        {
            var result = list.iterate_prev(it);
            var resultprev = list.iterate_get(result);
            bytes memory bytesString = new bytes(32);
    for (uint j=0; j<32; j++) {
        byte char = byte(bytes32(uint(resultprev) * 2 ** (8 * j)));
        if (char != 0) {
            bytesString[j] = char;
        }
    }
            return string(bytesString);
        }
        return "not here";
    }
    function search(bytes32 data) returns (uint80[]) {
        uint80[] memory postinglist = new uint80[](list.items.length);
        uint i = 0;
        var it = list.iterate_start();
        while(list.iterate_valid(it)) {
            if (list.iterate_get(it) == data)
            {
              postinglist[i] = it;
              i++;  
            }
            it = list.iterate_next(it);   
        }
        if(list.iterate_valid(postinglist[0])){
            return postinglist;
        }
        
    }
    function remove(bytes32 data) returns (bool success) {
        var it = list.find(data);
        if (list.iterate_valid(it))
        {
            list.remove(it);
            return true;
        }
        return false;
    }
}

import "github.com/ethereum/dapp-bin/library/linkedList.sol";

contract Caitest {
    using DoublyLinkedList for DoublyLinkedList.data;
    struct Index {
        uint80 firstkey;
        uint80 lastkey;
        uint80 countkey;
        DoublyLinkedList.data[10000] list;
        DoublyLinkedList.data keywords;
    }
    Caitest.Index test1;
    function Caitest() {
        bytes32[4] storage keywordlist;
        keywordlist[0] = "in";
        keywordlist[1] = "out";
        keywordlist[2] = "sse";
        keywordlist[3] = "ok";
        for (uint i = 0; i< 4; i++){
            bytes32 token = keccak256("k1", keywordlist[i]);
            test1.keywords.append(token);
            var it = test1.keywords.find(token);
            bytes32 eid = keccak256("k2", keywordlist[i]);
            bytes32 cipher = bytes32 ("fid1") ^ eid;
            test1.list[it].append(cipher);
            
        }
        test1.keywords.append("contract");
        test1.keywords.append("smart");
        test1.list[1].append("ooo");
        test1.list[2].append("abc");
        test1.list[2].append("def");
        test1.list[2].append("def");
    }
    function insertkeyword (bytes32 keyword) returns (uint) {
        bytes32 token = keccak256(keyword);
        var it = test1.keywords.find(token);
        if (!test1.keywords.iterate_valid(it))
        {
            test1.keywords.append(token);
            return test1.keywords.find(token);
        }
        return 0;
    }
    function addfile(bytes32[] keyword, bytes32 file)  returns (bool success) {
        for (uint i = 0; i< keyword.length; i++){
           bytes32 token = keccak256(keyword[i]);
           var it = test1.keywords.find(token);
           if (test1.keywords.iterate_valid(it))
        {
            test1.list[it].append(file);
        }
          test1.keywords.append(token);
          var newkey = test1.keywords.find(token);
          test1.list[newkey].append(file);
        }
        
        return true;
    }
    function prev(bytes32 data )  returns (string) {
        var it = test1.list[0].find(data);
        if (test1.list[0].iterate_valid(it))
        {
            var result = test1.list[0].iterate_prev(it);
            var resultprev = test1.list[0].iterate_get(result);
            bytes memory bytesString = new bytes(32);
    for (uint j=0; j<32; j++) {
        byte char = byte(bytes32(uint(resultprev) * 2 ** (8 * j)));
        if (char != 0) {
            bytesString[j] = char;
        }
    }
            return string(bytesString);
        }
        return "not here";
    }
    function search(bytes32 k1, bytes32 k2, bytes32 keyword) returns (bytes32[]) {
        bytes32 token = keccak256(k1 ,keyword);
        var it = test1.keywords.find(token);
        bytes32[] memory postlist = new bytes32[](test1.list[it].items.length);
        uint i = 0;
        var point = test1.list[it].iterate_start();
        while(test1.list[it].iterate_valid(point)){
            postlist[i] = test1.list[it].iterate_get(point) ^ keccak256(k2 ,keyword);
            i++;
            point = test1.list[it].iterate_next(point);
        }
        return postlist;
    }
    function locate(bytes32 data) returns (uint80[]) {
        uint80[] memory postinglist = new uint80[](test1.list[0].items.length);
        uint i = 0;
        var it = test1.list[0].iterate_start();
        while(test1.list[0].iterate_valid(it)) {
            if (test1.list[0].iterate_get(it) == data)
            {
              postinglist[i] = it;
              i++;  
            }
            it = test1.list[0].iterate_next(it);   
        }
        if(test1.list[0].iterate_valid(postinglist[0])){
            return postinglist;
        }
        
    }
    function remove(bytes32 data) returns (bool success) {
        var it = test1.list[0].find(data);
        if (test1.list[0].iterate_valid(it))
        {
            test1.list[0].remove(it);
            return true;
        }
        return false;
    }
}


import "github.com/ethereum/dapp-bin/library/linkedList.sol";

contract Caitest {
    using DoublyLinkedList for DoublyLinkedList.data;
    struct Index {
        uint80 firstkey;
        uint80 lastkey;
        uint80 countkey;
        DoublyLinkedList.data[10] list;
        DoublyLinkedList.data keywords;
    }
    Caitest.Index test1;
    function Caitest() {
        bytes32[] memory keywordlist = new bytes32[](4);
        keywordlist[0] = bytes32("in");
        keywordlist[1] = bytes32("out");
        keywordlist[2] = bytes32("sse");
        keywordlist[3] = bytes32("ok");
        for (uint i = 0; i< 4; i++){
            bytes32 token = keccak256(bytes32("k1"), keywordlist[i]);
            test1.keywords.append(token);
            var it = test1.keywords.find(token);
            bytes32 eid = keccak256(bytes32("k2"), keywordlist[i]);
            bytes32 cipher = bytes32 ("fid1") ^ eid;
            test1.list[it].append(cipher);
        }
    }
    function addfile(bytes32[] keyword, bytes32 file)  returns (bool success) {
        for (uint i = 0; i< keyword.length; i++){
           bytes32 token = keccak256(keyword[i]);
           var it = test1.keywords.find(token);
           if (test1.keywords.iterate_valid(it))
        {
            test1.list[it].append(file);
        }
          test1.keywords.append(token);
          var newkey = test1.keywords.find(token);
          test1.list[newkey].append(file);
        }
        
        return true;
    }
    function search(bytes32 k1, bytes32 k2, bytes32 keyword) returns (bytes32[]) {
        bytes32 token = keccak256(k1 ,keyword);
        var it = test1.keywords.find(token);
        bytes32[] memory postlist = new bytes32[](test1.list[it].items.length);
        uint i = 0;
        var point = test1.list[it].iterate_start();
        while(test1.list[it].iterate_valid(point)){
            postlist[i] = test1.list[it].iterate_get(point) ^ keccak256(k2 ,keyword);
            i++;
            point = test1.list[it].iterate_next(point);
        }
        
        return postlist;
    }

    function remove(bytes32 data) returns (bool success) {
        var it = test1.list[0].find(data);
        if (test1.list[0].iterate_valid(it))
        {
            test1.list[0].remove(it);
            return true;
        }
        return false;
    }



}N

contract HMAC{
    
    bytes32 key = 0x6161616161616161616161616161616161616161616161616161616161616161;
    bytes32 ipad = 0x3636363636363636363636363636363636363636363636363636363636363636;
    bytes32 opad = 0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c;
    byte pad = 0x00;
    
    function HMAC () {
 		//test['hu']= 'construct';
		//test['gyt'] ='tratea';
		var x = 888234;
    }
    function hmac( uint c) returns (string,string, bytes32 inm, string digest)
    {
        //bytes32 memory key32 = key
        string memory c_str = uintToString(c);
        bytes32 in32 = key ^ ipad;
        string memory in32_str = Bytes32toString(in32);
        bytes32 result = sha256(in32_str, c_str);
        //string memory result_str = hashtostr32(result);
        bytes32 out32 = key ^ opad;
        string memory out32_str = Bytes32toString(out32);
        bytes32 resultc = sha256(out32, result);
        return (in32_str, out32_str, result, hashtostr32(resultc));
    }
/*    
    function read() returns (bytes32)
    {
        return in32;
    }
*/    
    function uintToString(uint value) constant returns (string) {
 	bytes32 ret; 
 	uint v = value; 
 	bytes memory ret_str;
    if (v == 0) {
        ret = '0';
    }
    else { 
        while (v > 0) {
            ret = bytes32(uint(ret) / (2 ** 8));
            ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));
            v /= 10;
        }
    }
    
    if(value>= 0 && value<=9 ){ 
    	ret_str = new bytes(1);
    	ret_str[0] = ret[0];
    	
    }
    if(value >= 10 && value <= 99){
    	ret_str = new bytes(2);
    	
    	ret_str[0] = ret[0];
    	ret_str[1] = ret[1];
    }
    if(value >= 100 && value <= 999){
    	ret_str = new bytes(3);
    	ret_str[0] = ret[0];
    	ret_str[1] = ret[1];
    	ret_str[2] = ret[2];
    }
    
    
    return string(ret_str);
} 

    function Bytes32toString(bytes32 input)   returns (string){ 
		bytes memory bytesString = new bytes(32);
		
		for (uint i=0;i<32;i++){
			bytesString[i] = input[i];  //transform string into bytes array
		}
		
		return string(bytesString);		//transform bytes array into string

	}
	
	
	function stringsEqual(string memory _a, string memory _b) internal returns (bool) {
	bytes memory a = bytes(_a);
	bytes memory b = bytes(_b);
	if (a.length != b.length)
		return false;
	// @todo unroll this loop 
	for (uint i = 0; i < a.length; i ++)
		if (a[i] != b[i])
			return false;
	return true;
}

    function hashtostr32(bytes32  hash) returns (string){
	bytes memory str = new bytes(32);
    byte left;
    byte right;
    
    
     
//    bytes32  hash  =sha256('h'); 
 
	  for(uint i=0;i<16;i++){
		  
		right = (hash[i]<<4) >>4;
		left = (hash[i]>>4);
		
		left=byte(asciitostring(uint(left)));
		right=byte(asciitostring(uint(right)));
		
		str[2*i] = left;
		str[2*i+1] =right;

 } 
//	return (hash,string(str));
		return (string(str));
}

    function asciitostring(uint num) returns (uint){
		if(0x00<= num && num <= 0x09){
			num = num + 0x30;
		}
		if(0x0a<= num && num <= 0x0f){
			num = num + 0x57;
		}
		
		return num;
    }
}