pragma solidity ^0.4.9;

contract node{

    address next_node_address;
    uint num;
    
    function node (address addr){
        next_node_address =addr;
    }
    
    function store_index(uint temp) returns (uint) {
        num=temp;
        return num;
    }
    
    function read() external returns (uint){
        return num;
    }
    
    function set (bytes32[2] data) returns (bytes32[2]){
        data[0]=110;
        return data;
    }
    
    
}


contract master{
    
   address first_node_address;
   address master_node=this;
   uint node_num=0;
   
   
    
    function create_new_contract() returns (bytes32[2]) {
         bytes32[2]  data2;
         data2[1]=120;
           
        //the first node's next_node addres is set to 0.
        if (node_num == 0){
           first_node_address = 0x0;
        } 
        node new_node = new node(first_node_address);
        first_node_address = new_node;  //Name name = Name(watch_addr);
        node first_node = node(first_node_address);
        node_num ++;
       
     new_node.store_index(node_num);
   //  return first_node;
       return  first_node.set(data2);
        
    }
    
    function read_node_storage () returns (uint[] data){
        for (uint i=0;i<node_num;i++){
            
        }
    }
  
}